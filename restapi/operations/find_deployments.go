package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"github.com/vice-registry/vice-api/models"
)

// FindDeploymentsHandlerFunc turns a function with the right signature into a find deployments handler
type FindDeploymentsHandlerFunc func(FindDeploymentsParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn FindDeploymentsHandlerFunc) Handle(params FindDeploymentsParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// FindDeploymentsHandler interface for that can handle valid find deployments params
type FindDeploymentsHandler interface {
	Handle(FindDeploymentsParams, *models.User) middleware.Responder
}

// NewFindDeployments creates a new http.Handler for the find deployments operation
func NewFindDeployments(ctx *middleware.Context, handler FindDeploymentsHandler) *FindDeployments {
	return &FindDeployments{Context: ctx, Handler: handler}
}

/*FindDeployments swagger:route GET /deployments findDeployments

List all deployments of authenticated user

*/
type FindDeployments struct {
	Context *middleware.Context
	Handler FindDeploymentsHandler
}

func (o *FindDeployments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewFindDeploymentsParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
