// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"github.com/vice-registry/vice-api/models"
)

// DeleteEnvironmentHandlerFunc turns a function with the right signature into a delete environment handler
type DeleteEnvironmentHandlerFunc func(DeleteEnvironmentParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteEnvironmentHandlerFunc) Handle(params DeleteEnvironmentParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// DeleteEnvironmentHandler interface for that can handle valid delete environment params
type DeleteEnvironmentHandler interface {
	Handle(DeleteEnvironmentParams, *models.User) middleware.Responder
}

// NewDeleteEnvironment creates a new http.Handler for the delete environment operation
func NewDeleteEnvironment(ctx *middleware.Context, handler DeleteEnvironmentHandler) *DeleteEnvironment {
	return &DeleteEnvironment{Context: ctx, Handler: handler}
}

/*DeleteEnvironment swagger:route DELETE /environment/{environmentId} deleteEnvironment

Deletes an execution environment

*/
type DeleteEnvironment struct {
	Context *middleware.Context
	Handler DeleteEnvironmentHandler
}

func (o *DeleteEnvironment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteEnvironmentParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
