package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteExecutionEnvironmentHandlerFunc turns a function with the right signature into a delete execution environment handler
type DeleteExecutionEnvironmentHandlerFunc func(DeleteExecutionEnvironmentParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteExecutionEnvironmentHandlerFunc) Handle(params DeleteExecutionEnvironmentParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteExecutionEnvironmentHandler interface for that can handle valid delete execution environment params
type DeleteExecutionEnvironmentHandler interface {
	Handle(DeleteExecutionEnvironmentParams, interface{}) middleware.Responder
}

// NewDeleteExecutionEnvironment creates a new http.Handler for the delete execution environment operation
func NewDeleteExecutionEnvironment(ctx *middleware.Context, handler DeleteExecutionEnvironmentHandler) *DeleteExecutionEnvironment {
	return &DeleteExecutionEnvironment{Context: ctx, Handler: handler}
}

/*DeleteExecutionEnvironment swagger:route DELETE /executionenvironment/{executionenvironmentId} deleteExecutionEnvironment

Deletes an execution environment

*/
type DeleteExecutionEnvironment struct {
	Context *middleware.Context
	Handler DeleteExecutionEnvironmentHandler
}

func (o *DeleteExecutionEnvironment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteExecutionEnvironmentParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
