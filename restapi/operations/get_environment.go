package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"omi-gitlab.e-technik.uni-ulm.de/vice/vice-api/models"
)

// GetEnvironmentHandlerFunc turns a function with the right signature into a get environment handler
type GetEnvironmentHandlerFunc func(GetEnvironmentParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEnvironmentHandlerFunc) Handle(params GetEnvironmentParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// GetEnvironmentHandler interface for that can handle valid get environment params
type GetEnvironmentHandler interface {
	Handle(GetEnvironmentParams, *models.User) middleware.Responder
}

// NewGetEnvironment creates a new http.Handler for the get environment operation
func NewGetEnvironment(ctx *middleware.Context, handler GetEnvironmentHandler) *GetEnvironment {
	return &GetEnvironment{Context: ctx, Handler: handler}
}

/*GetEnvironment swagger:route GET /environment/{environmentId} getEnvironment

Get execution environment by id

*/
type GetEnvironment struct {
	Context *middleware.Context
	Handler GetEnvironmentHandler
}

func (o *GetEnvironment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetEnvironmentParams()

	uprinc, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
